import 'dart:async';import 'dart:ffi';import 'dart:io';import 'package:device_info_plus/device_info_plus.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:geocoding/geocoding.dart';import 'package:geolocator/geolocator.dart';import 'package:google_fonts/google_fonts.dart';import 'package:permission_handler/permission_handler.dart';import 'package:responsive_sizer/responsive_sizer.dart';import 'package:shared_preferences/shared_preferences.dart';import 'package:intl/intl.dart';class PhoneTrackLocationScreen extends StatefulWidget {  const PhoneTrackLocationScreen({    Key? key,  }) : super(key: key);  @override  _PhoneTrackLocationScreenState createState() =>      _PhoneTrackLocationScreenState();}class _PhoneTrackLocationScreenState extends State<PhoneTrackLocationScreen> {  // late Future<List<DeviceListModel>> deviceListMode;  // BannerAd? _bannerAd;  bool isLoaded = false;  bool isCurrentLocationTap = true;  // bool isActive = true;  String deviceId = '';  late String _currentAddress = "fetching location...";  final Geolocator geolocator = Geolocator();  late Position position;  _getCurrentLocation() async {    position = await GeolocatorPlatform.instance.getCurrentPosition();    if (mounted) {      setState(() {        _getAddressFromLatLng(position);      });    }  }  Timer? _timer;  int _start = 10;  // void startTimer(  //     String email, String displayName, String deviceId, String deviceModel) {  //   const oneSec = Duration(seconds: 1);  //   _timer = Timer.periodic(  //     oneSec,  //         (Timer timer) {  //       if (AppDataString.isResponseStatus) {  //         Navigator.of(context, rootNavigator: true).pop('dialog');  //         showDialog(  //             context: context,  //             builder: (BuildContext context) {  //               return DeviceGetLocationDialog(  //                   email: email,  //                   displayName: displayName,  //                   deviceId: deviceId,  //                   deviceModel: deviceModel);  //             });  //         // isActive = true;  //         AppDataString.isResponseStatus = false;  //         timer.cancel();  //         setState(() {});  //       }  //       if (_start == 0) {  //         // isActive = true;  //         Navigator.of(context, rootNavigator: true).pop('dialog');  //         showDialog(  //             context: context,  //             builder: (BuildContext context) {  //               return DialogResponseBackMessage(  //                 title: "Lost Phone no response send back",  //                 deviceModel: "Response Failed",  //                 // empty for uninstall dialog  //                 callback: () {  //                   Navigator.of(context, rootNavigator: true).pop('dialog');  //                 },  //               );  //             });  //         setState(() {  //           timer.cancel();  //         });  //       } else {  //         setState(() {  //           _start--;  //         });  //       }  //     },  //   );  // }  _getAddressFromLatLng(Position position) async {    try {      List<Placemark> placemarks =          await placemarkFromCoordinates(position.latitude, position.longitude);      Placemark place = placemarks[0];      _currentAddress =          '${place.street}, ${place.subLocality}, ${place.locality}, ${place.postalCode}, ${place.country}';      isCurrentLocationTap = true;      // showDialogs(AppDataString.selfDeviceModel);      if (mounted) {        setState(() {});      }    } catch (e) {      debugPrint("$e");    }  }  var scaffoldKey = GlobalKey<ScaffoldState>();  SharedPreferences? prefs;  Future<void> sharedPreferences() async {    prefs = await SharedPreferences.getInstance();  }  permissionLocation() async {    var status = await Permission.location.status;    var statusWhile = await Permission.locationWhenInUse.status;    if (statusWhile.isGranted) {      responseLocationPermission();    }    if (status.isGranted) {      debugPrint("isGranted");    } else if (status.isDenied) {      debugPrint("isDenied");      if (Platform.isAndroid) {        permissionBottomSheetDialog();      } else {        permissionBottomSheetDialog();      }      // We didn't ask for permission yet or the permission has been denied before but not permanently.    } else if (status.isPermanentlyDenied) {      showDialog(          context: context,          builder: (BuildContext context) => CupertinoAlertDialog(                title: const Text("Location Permission"),                content: const Text(                    "Employee location tracker want to access your current location"),                actions: <Widget>[                  CupertinoDialogAction(                    child: const Text("Cancel"),                    onPressed: () {                      Navigator.of(context, rootNavigator: true).pop('dialog');                    },                  ),                  CupertinoDialogAction(                    child: const Text("Setting"),                    onPressed: () {                      Navigator.of(context, rootNavigator: true).pop('dialog');                      openAppSettings();                    },                  )                ],              ));      // print("isPermanentlyDenied");    } else if (status.isRestricted) {      // print("isRestricted");    }  }  @override  void dispose() {    if (_timer != null) {      _timer!.cancel();    }    // TODO: implement dispose    super.dispose();  }  String? deviceUniqueId;  getDeviceId() async {    DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();    if(Platform.isAndroid) {      // AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;      // deviceUniqueId = androidInfo.id;      var prefs = await SharedPreferences.getInstance();      deviceUniqueId= prefs.getString("deviceId")??'';      print('androidInfo');    }else{      IosDeviceInfo iosDeviceInfo = await deviceInfo.iosInfo;      deviceUniqueId = iosDeviceInfo.identifierForVendor.toString();      print(deviceUniqueId);      print('deviceUniqueId');    }     setState(() {});  }  @override  void initState() {    if (Platform.isAndroid) {      permissionLocation();      _getCurrentLocation();      getDeviceId();      responseDeviceId();      // responseLocationPermission();    }else{      _getCurrentLocation();      getDeviceId();    }    sharedPreferences();    super.initState();  }  static const platformNative = MethodChannel('flutter.native/helper');  Future<void> responseDeviceId() async {    try {      deviceId = await platformNative.invokeMethod("PhoneDeviceId");      // deviceListMode = ConnectedDevices().fetchConnectDeviceList(deviceId, widget.email);      // print("DeviceId:: $deviceId");    } on PlatformException catch (e) {      debugPrint("Failed to Invoke: '${e.message}'.");    }    setState(() {      // _responseFromNativeCode1=res;    });  }  Future<void> responseLocationPermission() async {    try {      await platformNative.invokeMethod("locationPermission");    } on PlatformException catch (e) {      debugPrint("Failed to Invoke: '${e.message}'.");    }    setState(() {      // _responseFromNativeCode1=res;    });  }  @override  Widget build(BuildContext context) {    final height = MediaQuery.of(context).padding.top;    final currentDateTime = DateFormat('EEE, MMM d, yyyy - h:mm a').format(DateTime.now());    return Scaffold(      key: scaffoldKey,      body: Container(        margin: EdgeInsets.only(top: height),        padding: const EdgeInsets.symmetric(horizontal: 20.0),        child: Column(          children: [            Expanded(              child: Center(                child: Container(                  padding: const EdgeInsets.all(20.0),                  decoration: BoxDecoration(                    color: Colors.white,                    borderRadius: BorderRadius.circular(15.0),                    boxShadow: [                      BoxShadow(                        color: Colors.black26,                        blurRadius: 10.0,                        offset: Offset(0, 4),                      ),                    ],                  ),                  child: Column(                    mainAxisSize: MainAxisSize.min,                    crossAxisAlignment: CrossAxisAlignment.center,                    children: [                      Icon(                        Icons.location_on,                        color: Colors.blueAccent,                        size: 50.0,                      ),                      const SizedBox(height: 20.0),                      Text(                        "My Location",                        textAlign: TextAlign.center,                        style: GoogleFonts.poppins(                          color: Colors.black87,                          fontWeight: FontWeight.bold,                          fontSize: 24.0,                        ),                      ),                      const SizedBox(height: 10.0),                      Text(                        _currentAddress,                        textAlign: TextAlign.center,                        style: GoogleFonts.poppins(                          color: Colors.grey[700],                          fontWeight: FontWeight.normal,                          fontSize: 18.0,                        ),                      ),                      const SizedBox(height: 10.0),                      Text(                        Platform.isAndroid?"Android Id":"IPhone Id",                        textAlign: TextAlign.center,                        style: GoogleFonts.poppins(                          color: Colors.black87,                          fontWeight: FontWeight.bold,                          fontSize: 20.0,                        ),                      ),                      const SizedBox(height: 10.0),                      Text(                        "${deviceUniqueId}",                        textAlign: TextAlign.center,                        style: GoogleFonts.poppins(                          color: Colors.grey[700],                          fontWeight: FontWeight.normal,                          fontSize: 20.0,                        ),                      ),                      SizedBox(height: 20.0),                      Text(                        "Time Now",                        textAlign: TextAlign.center,                        style: GoogleFonts.poppins(                          color: Colors.black87,                          fontWeight: FontWeight.bold,                          fontSize: 20.0,                        ),                      ),                      Text(                        currentDateTime,                        style: GoogleFonts.poppins(                          fontSize: 16.0,                          color: Colors.blueGrey,                        ),                      ),                    ],                  ),                ),              ),            ),          ],        ),      ),    );  }  // Widget bodyWidgets(context, title, body) {  //   return FutureBuilder<List<DeviceModel>>(  //       future: ConnectedDevices().fetchConnectDeviceList(  //           deviceId, widget.email, widget.password, getConnectDevices),  //       builder: (BuildContext contexts, snapshot) {  //         if (snapshot.hasData) {  //           List<DeviceModel> deviceModel = snapshot.data!;  //           if (deviceModel.isNotEmpty) {  //             return ListView.builder(  //                 shrinkWrap: true,  //                 primary: true,  //                 padding: EdgeInsets.only(left: 8.w, right: 8.w, bottom: 8.w),  //                 itemCount: deviceModel.length,  //                 physics: const BouncingScrollPhysics(),  //                 itemBuilder: (context, index) {  //                   return DeviceListWidget(  //                       deviceModel: deviceModel[index].device_model,  //                       buttonText: "Track",  //                       callbackAction: () {  //                         if (isActive) {  //                           setState(  //                             () {  //                               isActive = false;  //                               _start = 10;  //                               // var progress =  //                               // ProgressHUD.of(context);  //                               // progress?.showWithText(  //                               //     'Loading...');  //                               DialogLoader loader = DialogLoader();  //                               loader.showDialog(contexts);  //                               // Internet Present Case  //                               FcmApi fcmApi = FcmApi();  //                               fcmApi  //                                   .sendFcmMessage(  //                                       "Location",  //                                       "location is being fetched",  //                                       deviceModel[index].device_token,  //                                       prefs!.getString("token")!,  //                                       deviceModel[index].manufacture_name)  //                                   .then((value) {  //                                 startTimer(  //                                     deviceModel[index].email,  //                                     deviceModel[index].name,  //                                     deviceModel[index].device_id,  //                                     deviceModel[index].device_model);  //                                 // Future.delayed(const Duration(seconds: 3),  //                                 //     () {  //                                 //   // progress?.dismiss();  //                                 // });  //                               }).catchError((e) {  //                                 isActive = true;  //                                 Navigator.of(context, rootNavigator: true)  //                                     .pop('dialog');  //                               });  //                             },  //                           );  //                         }  //                       });  //                 });  //           } else {  //             return Padding(  //               padding: const EdgeInsets.all(50),  //               child: Center(  //                   child: Text("No active device found",  //                       style: GoogleFonts.poppins(  //                           fontSize: 10.sp,  //                           color: Colors.blue,  //                           fontWeight: FontWeight.normal))),  //             );  //           }  //         } else if (snapshot.hasError) {  //           return Center(  //             child: Column(  //               crossAxisAlignment: CrossAxisAlignment.center,  //               mainAxisAlignment: MainAxisAlignment.center,  //               children: [  //                 Center(  //                     child: Text("Check internet connection",  //                         style: GoogleFonts.poppins(  //                             fontSize: 10.sp,  //                             color: Colors.blue,  //                             fontWeight: FontWeight.normal))),  //                 Center(  //                     child: ElevatedButton(  //                         onPressed: () {  //                           setState(() {});  //                         },  //                         child: Text(  //                           "Try again",  //                           style: GoogleFonts.poppins(  //                               fontSize: 10.sp,  //                               color: Colors.white,  //                               fontWeight: FontWeight.normal),  //                         ))),  //               ],  //             ),  //           );  //         }  //         return Center(  //             child: Container(  //                 child: Lottie.asset(ResourcesPath.loaderAnimationPath,  //                     height: 15.w, width: 15.w)));  //       });  // }  // void showDialogs(String deviceModels) {  //   showGeneralDialog(  //       context: context,  //       barrierDismissible: true,  //       barrierLabel:  //       MaterialLocalizations.of(context).modalBarrierDismissLabel,  //       barrierColor: Colors.black26,  //       pageBuilder: (context, anim1, anim2) {  //         return Center(  //           child: SizedBox(  //             width: 80.w,  //             height: 50.w,  //             child: StatefulBuilder(  //               builder: (context, snapshot) {  //                 return Card(  //                   shape: RoundedRectangleBorder(  //                     borderRadius: BorderRadius.circular(20.0),  //                   ),  //                   color: ColorsCode.cardBgColors,  //                   child: Column(children: <Widget>[  //                     Expanded(  //                         child: Padding(  //                           padding: const EdgeInsets.only(  //                               top: 8.0, left: 16.0, right: 16.0),  //                           child: Column(  //                             crossAxisAlignment: CrossAxisAlignment.start,  //                             children: [  //                               // SvgPicture.asset(ResourcesPath.mobileIcon,  //                               //     height: 30.w,  //                               //     width: 30.w,  //                               //     alignment: Alignment.center),  //                               Padding(  //                                 padding: const EdgeInsets.only(  //                                     left: 8.0, right: 8.0, top: 8.0),  //                                 child: Text("Track Location",  //                                     textAlign: TextAlign.center,  //                                     style: GoogleFonts.poppins(  //                                         fontSize: 14.sp,  //                                         color: ColorsCode.textOneColor,  //                                         fontWeight: FontWeight.bold)),  //                               ),  //                               Expanded(  //                                   child: Column(  //                                     children: [  //                                       Padding(  //                                         padding: const EdgeInsets.only(  //                                             left: 8.0, right: 8.0, top: 8.0),  //                                         child: Text(deviceModels,  //                                             textAlign: TextAlign.center,  //                                             style: GoogleFonts.poppins(  //                                                 fontSize: 12.sp,  //                                                 color: Colors.blue,  //                                                 fontWeight: FontWeight.bold)),  //                                       ),  //                                       Expanded(  //                                           child: Padding(  //                                             padding: const EdgeInsets.only(  //                                                 left: 8.0, right: 8.0),  //                                             child: Text(  //                                               _currentAddress,  //                                               style: GoogleFonts.poppins(fontSize: 8.sp),  //                                             ),  //                                           )),  //                                     ],  //                                   )),  //                             ],  //                           ),  //                         )),  //                     Padding(  //                       padding: const EdgeInsets.only(  //                           left: 16.0, bottom: 16.0, right: 16.0),  //                       child: ElevatedButton(  //                         onPressed: () async {  //                           if (Platform.isAndroid) {  //                             bool isAvailable =  //                             await MapLauncher.isMapAvailable(  //                                 MapType.google) as bool;  //                             if (isAvailable) {  //                               await MapLauncher.showMarker(  //                                 mapType: MapType.google,  //                                 coords: Coords(  //                                     position.latitude, position.longitude),  //                                 title: "Your mobile here",  //                               );  //                             } else {  //                               Fluttertoast.showToast(  //                                   msg:  //                                   "No Google map installed in your mobile",  //                                   toastLength: Toast.LENGTH_SHORT,  //                                   gravity: ToastGravity.BOTTOM,  //                                   timeInSecForIosWeb: 1,  //                                   backgroundColor: Colors.red,  //                                   textColor: Colors.white,  //                                   fontSize: 16.0);  //                             }  //                           } else if (Platform.isIOS) {  //                             bool isAvailable =  //                             await MapLauncher.isMapAvailable(  //                                 MapType.apple) as bool;  //                             if (isAvailable) {  //                               await MapLauncher.showMarker(  //                                 mapType: MapType.apple,  //                                 coords: Coords(  //                                     position.latitude, position.longitude),  //                                 title: "Your mobile here",  //                               );  //                             } else {  //                               Fluttertoast.showToast(  //                                   msg:  //                                   "No Apple map installed in your mobile",  //                                   toastLength: Toast.LENGTH_SHORT,  //                                   gravity: ToastGravity.BOTTOM,  //                                   timeInSecForIosWeb: 1,  //                                   backgroundColor: Colors.red,  //                                   textColor: Colors.white,  //                                   fontSize: 16.0);  //                             }  //                           }  //                         },  //                         style: ElevatedButton.styleFrom(  //                           fixedSize: Size(40.w, 8.w),  //                           primary: Colors.blue,  //                         ),  //                         child: Text('See location on map',  //                             style: GoogleFonts.poppins(  //                                 fontWeight: FontWeight.w400, fontSize: 8.sp)),  //                       ),  //                     ),  //                   ]),  //                 );  //               },  //             ),  //           ),  //         );  //       },  //       transitionBuilder: (_, anim, __, child) {  //         return SlideTransition(  //           position: Tween(begin: const Offset(0, 0), end: const Offset(0, 0))  //               .animate(anim),  //           child: child,  //         );  //       });  // }  permissionBottomSheetDialog() {    return showModalBottomSheet(        shape: const RoundedRectangleBorder(          borderRadius: BorderRadius.only(              topLeft: Radius.circular(20), topRight: Radius.circular(20)),        ),        context: context,        builder: (context) {          return Stack(            children: [              Container(                margin: EdgeInsets.only(                    bottom: 7.h, top: 4.h, left: 5.w, right: 5.w),                child: SingleChildScrollView(                  child: Column(                    mainAxisSize: MainAxisSize.min,                    children: <Widget>[                      Center(                        child: Padding(                          padding: const EdgeInsets.all(8.0),                          child: Text(                            "Find my Phone location",                            style: GoogleFonts.poppins(                                fontSize: 18.sp,                                fontWeight: FontWeight.w900,                                color: Colors.black),                          ),                        ),                      ),                      Center(                          child: Padding(                              padding: const EdgeInsets.all(16.0),                              child: Text(                                  "This application required background location permission"                                  "in order to run properly.\nThis application collects location "                                  "data enable phone location even when app is not open.\n"                                  "This location data is used to track your  phone. You will"                                  "get location of your phone only if you allowed background location"                                  "permission.",                                  style: GoogleFonts.poppins(                                      fontSize: 12.sp,                                      fontWeight: FontWeight.w400,                                      color: Colors.black)))),                    ],                  ),                ),              ),              Align(                alignment: Alignment.bottomCenter,                child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  crossAxisAlignment: CrossAxisAlignment.center,                  children: [                    Padding(                      padding: const EdgeInsets.only(left: 16.0),                      child: Container(                        width: 30.w,                        height: 8.w,                        decoration: BoxDecoration(                            color: Colors.white,                            borderRadius: BorderRadius.circular(10),                            border: Border.all(color: Colors.blue)),                        child: MaterialButton(                          shape: RoundedRectangleBorder(                            borderRadius: BorderRadius.circular(10.0),                          ),                          onPressed: () {                            Navigator.pop(context);                          },                          child: Center(                            child: Text(                              "Cancel",                              textAlign: TextAlign.center,                              style: GoogleFonts.poppins(                                fontWeight: FontWeight.w400,                                color: Colors.black,                                fontSize: 12.sp,                              ),                            ),                          ),                        ),                      ),                    ),                    SizedBox(                      width: 4.w,                    ),                    Padding(                      padding: const EdgeInsets.all(16.0),                      child: Container(                        width: 30.w,                        height: 8.w,                        decoration: BoxDecoration(                            color: Colors.blue,                            borderRadius: BorderRadius.circular(10),                            border: Border.all(color: Colors.blue)),                        child: MaterialButton(                          shape: RoundedRectangleBorder(                            borderRadius: BorderRadius.circular(10.0),                          ),                          onPressed: () async {                            Navigator.pop(context);                            // await Permission.location.request();                            responseLocationPermission();                            // if (AppString.showAds % 2 == 0) {                            //   // admobeSetting.showInterstitialAds(                            //   //     1, context, prefs!);                            // } else {                            //   admobeSetting.navigateScreenRequired(                            //       1, context, prefs!);                            // }                            // AppString.showAds++;                            //                          },                          child: Center(                            child: Text(                              "Allow",                              textAlign: TextAlign.center,                              style: GoogleFonts.poppins(                                fontWeight: FontWeight.w400,                                color: Colors.white,                                fontSize: 12.sp,                              ),                            ),                          ),                        ),                      ),                    )                  ],                ),              )            ],          );        });  }}